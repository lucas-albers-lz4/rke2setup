---
- name: Verify cluster health
  block:
    - name: Wait for all control plane nodes
      command:
        cmd: "{{ paths.rke2.bin }}/kubectl get nodes --selector='node-role.kubernetes.io/control-plane' -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.status.conditions[?(@.type==\"Ready\")].status}{\"\\n\"}{end}'"
      environment:
        KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
      register: control_plane_status
      until: control_plane_status.rc == 0
      retries: 30
      delay: 10
      delegate_to: "{{ hostvars[groups['control_plane_nodes'][0]]['inventory_hostname'] }}"
      run_once: true
      when:
        - inventory_hostname != groups['control_plane_nodes'][0]
        - groups['control_plane_nodes'] | length > 1

    - name: Check overall cluster health
      command:
        cmd: "{{ paths.rke2.bin }}/kubectl get --raw=/healthz"
      environment:
        KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
      register: cluster_health
      until: cluster_health.rc == 0
      retries: 30
      delay: 10
      delegate_to: "{{ hostvars[groups['control_plane_nodes'][0]]['inventory_hostname'] }}"
      run_once: true
      when:
        - inventory_hostname != groups['control_plane_nodes'][0]
        - groups['control_plane_nodes'] | length > 1

    - name: Verify remaining nodes are Ready
      command:
        cmd: "{{ paths.rke2.bin }}/kubectl get nodes --field-selector=metadata.name!={{ inventory_hostname }} -o jsonpath='{.items[*].status.conditions[?(@.type==\"Ready\")].status}'"
      environment:
        KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
      register: nodes_status
      until: nodes_status.stdout | regex_findall('True') | length >= (groups['control_plane_nodes'] | length - 1)
      retries: 30
      delay: 10
      delegate_to: "{{ hostvars[groups['control_plane_nodes'][0]]['inventory_hostname'] }}"
      run_once: true
      when:
        - inventory_hostname != groups['control_plane_nodes'][0]
        - groups['control_plane_nodes'] | length > 1
