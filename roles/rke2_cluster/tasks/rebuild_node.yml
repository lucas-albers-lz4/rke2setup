---
- name: Set common variables
  ansible.builtin.set_fact:
    etcd_base_cmd: "{{ kube_cmd }} exec -n kube-system etcd-{{ groups['control_plane_nodes'][0] | lower }} -- etcdctl {{ etcdctl_params }}"
    rke2_dirs:
      - /etc/rancher/rke2
      - /var/lib/rancher/rke2/bin
      - /usr/local/bin

- name: Verify cluster health before rebuild
  ansible.builtin.include_tasks: verify_cluster.yml
  when: inventory_hostname != groups['control_plane_nodes'][0]

- name: Get existing token from first control plane
  ansible.builtin.slurp:
    src: /etc/rancher/rke2/config.yaml
  register: existing_config
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true

- name: Set token from existing cluster
  ansible.builtin.set_fact:
    rke2_token: "{{ (existing_config.content | b64decode | from_yaml).token }}"

- name: Ensure RKE2 directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  become: true
  loop: "{{ rke2_dirs }}"

- name: Debug etcd member list
  ansible.builtin.shell: |
    {{ etcd_base_cmd }} member list | awk -F',' '{printf "%-12s %-10s %-15s %-25s %-25s %s\n", $1, $2, $3, $4, $5, $6}'
  register: etcd_members
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  changed_when: false
  when: 
    - inventory_hostname in groups['control_plane_nodes']
    - groups['control_plane_nodes'] | length > 0

- name: Display etcd members
  ansible.builtin.debug:
    msg: |
      Current etcd members:
      ID            Status     Name          Peer URL                   Client URL                 Leader
      {% for line in etcd_members.stdout_lines %}
      {{ line }}
      {% endfor %}
  when: inventory_hostname in groups['control_plane_nodes']

- name: Get etcd member ID for the node
  ansible.builtin.shell: |
    {{ kube_cmd }} exec -n kube-system etcd-k1 -- etcdctl {{ etcdctl_params }} member list | grep {{ inventory_hostname }} | cut -d',' -f1
  register: etcd_member_id
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  when: inventory_hostname in groups['control_plane_nodes']

- name: Remove etcd member
  ansible.builtin.shell: "{{ etcd_base_cmd }} member remove {{ etcd_member_id.stdout }}"
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  when: 
    - inventory_hostname in groups['control_plane_nodes']
    - etcd_member_id.stdout is defined
    - etcd_member_id.stdout != ""

- name: Verify etcd member removal
  when: 
    - inventory_hostname in groups['control_plane_nodes']
    - etcd_member_id.stdout is defined
    - etcd_member_id.stdout != ""
  ansible.builtin.shell: |
    {{ kube_cmd }} exec -n kube-system etcd-k1 -- etcdctl {{ etcdctl_params }} member list | grep -v {{ inventory_hostname }}
  register: etcd_members
  until: etcd_members.rc == 0
  retries: 30
  delay: 10
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  changed_when: false

- name: Skip etcd verification
  ansible.builtin.debug:
    msg: "Skipping etcd verification - node {{ inventory_hostname }} not found in etcd member list"
  when: inventory_hostname in groups['control_plane_nodes'] and etcd_member_id.stdout == ""

- name: Fail if node still exists in etcd
  ansible.builtin.fail:
    msg: "Node {{ inventory_hostname }} still exists in etcd member list"
  when:
    - inventory_hostname in groups['control_plane_nodes']
    - etcd_member_id.stdout is defined
    - etcd_member_id.stdout != ""
    - inventory_hostname | lower in (etcd_member_list.stdout | default(''))

- name: Delete node from Kubernetes
  ansible.builtin.shell: "{{ kube_cmd }} delete node {{ inventory_hostname | lower }}"
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  failed_when: false
  when: inventory_hostname != groups['control_plane_nodes'][0]

- name: Verify node removal from Kubernetes
  ansible.builtin.shell: "{{ kube_cmd }} get node {{ inventory_hostname | lower }}"
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  register: node_check
  until: node_check.rc == 1 or node_check.stderr is search("not found")
  retries: 6
  delay: 10
  changed_when: false
  failed_when: false
  when: inventory_hostname != groups['control_plane_nodes'][0]

- name: Check for uninstall scripts
  ansible.builtin.stat:
    path: "/usr/local/bin/{{ item }}"
  register: script_check
  loop:
    - rke2-uninstall.sh
    - rke2-killall.sh
  become: true

- name: Uninstall RKE2 if scripts exist
  ansible.builtin.shell: |
    /usr/local/bin/rke2-killall.sh
    sleep 5
    /usr/local/bin/rke2-uninstall.sh
  when: 
    - script_check.results is defined
    - script_check.results | selectattr('stat.exists') | list | length == 2
  become: true

- name: Ensure RKE2 directories exist after uninstall
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  with_items: "{{ rke2_dirs }}"
  become: true

- name: Configure node
  ansible.builtin.template:
    src: config.yaml.j2
    dest: /etc/rancher/rke2/config.yaml
    mode: '0644'
    owner: root
    group: root
  become: true

- name: Install RKE2
  ansible.builtin.shell: |
    curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE={{ 'server' if inventory_hostname in groups['control_plane_nodes'] else 'agent' }} sh -
  args:
    creates: /usr/local/bin/rke2
  become: true

- name: Start RKE2 service
  ansible.builtin.systemd:
    name: "rke2-{{ 'server' if inventory_hostname in groups['control_plane_nodes'] else 'agent' }}"
    state: started
    enabled: true
  become: true

- name: Wait for node to appear in cluster
  ansible.builtin.shell: |
    {{ kube_cmd }} get nodes {{ inventory_hostname | lower }} -o name
  register: node_exists
  until: node_exists.rc == 0
  retries: 30
  delay: 10
  changed_when: false
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true

- name: Wait for node to be ready
  ansible.builtin.shell: |
    {{ kube_cmd }} get nodes {{ inventory_hostname | lower }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
  register: node_ready
  until: node_ready.stdout == "True"
  retries: 30
  delay: 10
  changed_when: false
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  when: node_exists.rc == 0

- name: Show node status
  ansible.builtin.shell: |
    {{ kube_cmd }} get nodes {{ inventory_hostname | lower }} -o wide
  register: node_status
  changed_when: false
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  become: true
  when: node_exists.rc == 0

- name: Wait for all control plane nodes except current node
  shell: |
    {{ kube_cmd }} get nodes --selector='node-role.kubernetes.io/control-plane' --no-headers | grep -v {{ inventory_hostname }} | grep Ready
  register: control_plane_nodes
  until: control_plane_nodes.rc == 0
  retries: 30
  delay: 10
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"

- name: Wait for etcd health after node removal
  when: inventory_hostname in groups['control_plane_nodes']
  ansible.builtin.command:
    cmd: "{{ etcd_base_cmd }} endpoint health"
  register: etcd_health
  until: etcd_health.rc == 0
  retries: 30
  delay: 10
  delegate_to: "{{ groups['control_plane_nodes'][0] }}"
  changed_when: false
