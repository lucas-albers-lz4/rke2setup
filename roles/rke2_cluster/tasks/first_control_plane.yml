---
# First check if RKE2 is already installed and configured
- name: Check if RKE2 is already configured
  ansible.builtin.stat:
    path: "{{ paths.rke2.config }}/config.yaml"
  register: rke2_config

- name: Slurp existing config
  ansible.builtin.slurp:
    src: /etc/rancher/rke2/config.yaml
  register: rke2_config_content
  when: rke2_config.stat.exists

- name: Parse existing token
  ansible.builtin.set_fact:
    rke2_token: "{{ (rke2_config_content.content | b64decode | from_yaml).token }}"
  when: rke2_config.stat.exists and rke2_config_content is defined

- name: Generate new token if none exists
  when: not rke2_config.stat.exists

  block:
    - name: Generate cluster token
      ansible.builtin.shell: tr -dc A-Za-z0-9 </dev/urandom | head -c 64
      register: token_result
      when: not rke2_config.stat.exists

    - name: Set RKE2 token from generation
      ansible.builtin.set_fact:
        rke2_token: "{{ token_result.stdout }}"
      when: token_result is defined and token_result.stdout is defined
- name: Verify token is set
  ansible.builtin.assert:
    that:
      - rke2_token is defined
      - rke2_token | string | length > 0
    fail_msg: "Failed to set RKE2 token - neither existing token found nor new token generated"

- name: Share token with other hosts
  ansible.builtin.set_fact:
    rke2_token: "{{ hostvars[groups['control_plane_nodes'][0]].rke2_token }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"
  when: rke2_token is defined

- name: Create RKE2 config directory
  ansible.builtin.file:
    path: "{{ paths.rke2.config }}"
    state: directory
    mode: "0755"
  become: true

- name: Configure first control plane node
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ paths.rke2.config }}/config.yaml"
    mode: "0644"
  vars:
    tls_san: "{{ rke2_config['tls-san'] }}"
    token: "{{ rke2_config.token }}"
  become: true

- name: Download RKE2 installation script
  ansible.builtin.get_url:
    url: https://get.rke2.io
    dest: /tmp/rke2-install.sh
    mode: "0700"
  become: true

- name: Execute RKE2 server installation
  ansible.builtin.shell: |
    INSTALL_RKE2_TYPE=server bash /tmp/rke2-install.sh
  args:
    creates: /usr/local/bin/rke2
  become: true

- name: Enable rke2-server
  ansible.builtin.command: systemctl enable rke2-server
  become: true
  ignore_errors: false

- name: Set version directory path
  ansible.builtin.set_fact:
    version_dir: "{{ lookup('env', 'HOME') }}/Downloads/rke2-images/{{ rke2_version | default('v1.31.4+rke2r1') }}"

- name: Map architecture to RKE2 format
  ansible.builtin.set_fact:
    rke2_arch: >-
      {{
        'amd64' if ansible_architecture == 'x86_64'
        else 'arm64' if ansible_architecture in ['aarch64', 'arm64']
        else ansible_architecture
      }}

- name: Ensure airgap images directory exists
  ansible.builtin.file:
    path: "/var/lib/rancher/rke2/agent/images"
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true
  when: airgap_install | default(false) | bool

- name: Copy airgap images
  ansible.builtin.copy:
    src: "{{ version_dir }}/rke2-images.linux-{{ rke2_arch }}.tar.zst"
    dest: "/var/lib/rancher/rke2/agent/images/rke2-images.linux-{{ rke2_arch }}.tar.zst"
    mode: '0644'
    owner: root
    group: root
  become: true
  when: airgap_install | default(false) | bool
  register: copy_result

- name: Set file permissions
  ansible.builtin.file:
    path: "/var/lib/rancher/rke2/agent/images/rke2-images.linux-{{ rke2_arch }}.tar.zst"
    mode: '0644'
    owner: root
    group: root
  become: true
  when: airgap_install | default(false) | bool

# Now start the service
- name: Start RKE2 server service
  ansible.builtin.systemd:
    name: rke2-server
    state: started
    enabled: true
  become: true
  register: server_start
  until: server_start is success
  retries: "{{ retry_standard }}"
  delay: "{{ retry_delay }}"

- name: Wait for RKE2 service to be fully started
  ansible.builtin.wait_for:
    timeout: 181
  register: wait_result
  retries: 12 
  delay: 15
  until: wait_result is success

- name: Wait for RKE2 binaries to be installed
  ansible.builtin.wait_for:
    path: "{{ paths.rke2.bin }}/kubectl"
    timeout: 300
  register: kubectl_binary
  retries: 3
  delay: 10
  until: kubectl_binary is success

- name: Debug kubectl binary status
  ansible.builtin.debug:
    msg:
      - "Kubectl binary exists: {{ kubectl_binary.stat.exists | default(false) }}"
      - "Wait time: {{ kubectl_binary.elapsed }}"
      - "Path: {{ paths.rke2.bin }}/kubectl"

- name: Create kubectl symlink
  ansible.builtin.file:
    src: "{{ paths.rke2.bin }}/kubectl"
    dest: "/usr/local/bin/kubectl"
    state: link
    force: true
  when: kubectl_binary.stat.exists | default(false)

- name: Check if .kube directory exists
  ansible.builtin.stat:
    path: "/home/{{ ansible_user }}/.kube"
  register: kube_dir

- name: Create .kube directory if it doesn't exist
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"
  when: not kube_dir.stat.exists

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: "{{ paths.rke2.kubeconfig }}"
    dest: "/home/{{ ansible_user }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
  when: kubectl_binary.stat is defined

- name: Debug token generation process
  block:
    - name: Show existing configuration status
      ansible.builtin.debug:
        msg:
          - "RKE2 config exists: {{ rke2_config.stat.exists }}"
          - "Inventory hostname: {{ inventory_hostname }}"
          - "First control plane node: {{ groups['control_plane_nodes'][0] }}"

    - name: Verbose token generation
      ansible.builtin.debug:
        msg: "Generating or retrieving token for {{ inventory_hostname }}"

- name: Wait for token to be available
  ansible.builtin.wait_for:
    timeout: 30
  when: rke2_token is defined

- name: Verify token sharing
  ansible.builtin.debug:
    msg: "Token status for {{ item }}: {{ hostvars[item].rke2_token is defined }}"
  with_items: "{{ groups['all'] }}"
  run_once: true

- name: Wait for node readiness
  ansible.builtin.shell: |
    {{ paths.rke2.bin }}/kubectl get nodes {{ inventory_hostname | lower }} \
      -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
  environment:
    KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
  register: node_ready
  until: node_ready.stdout == "True"
  retries: "{{ retry_extended }}"
  delay: "{{ retry_delay }}"
  changed_when: false
  become: true

- name: Set control plane ready status
  ansible.builtin.set_fact:
    control_plane_ready: "{{ node_ready.stdout == 'True' }}"

- name: Debug RKE2 status
  ansible.builtin.debug:
    msg: |
      Node Ready Status: {{ node_ready.stdout }}
      Control Plane Ready: {{ control_plane_ready }}
  when: inventory_hostname == groups['control_plane_nodes'][0]

- name: Verify first control plane is ready
  block:
    - name: Set proper permissions on RKE2 config directory and files
      ansible.builtin.file:
        path: "{{ item }}"
        mode: "0644"
        owner: "root"
        group: "root"
      loop:
        - "{{ paths.rke2.kubeconfig }}"
      become: true

    - name: Check node status
      ansible.builtin.command:
        cmd: "{{ paths.rke2.bin }}/kubectl get nodes"
      environment:
        KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
      register: node_status
      changed_when: false
      become: true
      retries: 6
      delay: 10
      until: node_status.rc == 0
      
    - name: Debug node status
      ansible.builtin.debug:
        msg: "{{ node_status.stdout_lines | default([]) }}"
      when: node_status.rc == 0
  rescue:
    - name: Debug failure
      ansible.builtin.debug:
        msg: 
          - "Failed to verify control plane readiness"
          - "KUBECONFIG permissions: {{ lookup('file', paths.rke2.kubeconfig, errors='ignore') | default('Unable to read file') }}"
          - "Error: {{ node_status.stderr | default('No error message available') }}"

- name: Check control plane pods
  ansible.builtin.command:
    cmd: "{{ paths.rke2.bin }}/kubectl get pods -n kube-system -l tier=control-plane -o wide"
  environment:
    KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
  register: pod_status
  changed_when: false

- name: Check etcd health
  ansible.builtin.command:
    cmd: "{{ paths.rke2.bin }}/kubectl get --raw /healthz/etcd"
  environment:
    KUBECONFIG: "{{ paths.rke2.kubeconfig }}"
  register: etcd_health
  until: etcd_health.stdout == "ok"
  retries: 30
  delay: 10
  changed_when: false

- name: Set expected etcd count
  ansible.builtin.set_fact:
    expected_etcd_count: >-
      {{
        1 if inventory_hostname == groups['control_plane_nodes'][0]
        else groups['control_plane_nodes'] | length
      }}
    rebuilding_first_node: "{{ inventory_hostname == groups['control_plane_nodes'][0] }}"

- name: Debug etcd validation parameters
  ansible.builtin.debug:
    msg:
      - "Current node: {{ inventory_hostname }}"
      - "First control plane node: {{ groups['control_plane_nodes'][0] }}"
      - "Is rebuilding first node: {{ rebuilding_first_node }}"
      - "Expected etcd count: {{ expected_etcd_count }}"
