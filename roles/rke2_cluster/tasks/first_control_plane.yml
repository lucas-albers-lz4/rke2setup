---
# First check if RKE2 is already installed and configured
- name: Check if RKE2 is already configured
  ansible.builtin.stat:
    path: /etc/rancher/rke2/config.yaml
  register: rke2_config

- name: Slurp existing config
  ansible.builtin.slurp:
    src: /etc/rancher/rke2/config.yaml
  register: rke2_config_content
  when: rke2_config.stat.exists

- name: Parse existing token
  ansible.builtin.set_fact:
    rke2_token: "{{ (rke2_config_content.content | b64decode | from_yaml).token }}"
  when: rke2_config.stat.exists and rke2_config_content is defined

- name: Generate new token if none exists
  block:
    - name: Generate cluster token
      ansible.builtin.shell: tr -dc A-Za-z0-9 </dev/urandom | head -c 64
      register: token_result
      when: not rke2_config.stat.exists

    - name: Set RKE2 token from generation
      ansible.builtin.set_fact:
        rke2_token: "{{ token_result.stdout }}"
      when: token_result is defined and token_result.stdout is defined
  when: not rke2_config.stat.exists

- name: Verify token is set
  ansible.builtin.assert:
    that: 
      - rke2_token is defined
      - rke2_token | string | length > 0
    fail_msg: "Failed to set RKE2 token - neither existing token found nor new token generated"

- name: Share token with other hosts
  ansible.builtin.set_fact:
    rke2_token: "{{ hostvars[groups['control_plane_nodes'][0]].rke2_token }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"
  when: rke2_token is defined

- name: Create RKE2 config directory
  ansible.builtin.file:
    path: /etc/rancher/rke2
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Configure first control plane node
  ansible.builtin.template:
    src: config.yaml.j2
    dest: /etc/rancher/rke2/config.yaml
    mode: '0600'

- name: Download RKE2 installation script
  ansible.builtin.get_url:
    url: https://get.rke2.io
    dest: /tmp/rke2-install.sh
    mode: '0755'
  register: rke2_installer

- name: Install RKE2 server
  block:
    - name: Execute RKE2 server installation
      ansible.builtin.shell: |
        set -o pipefail
        INSTALL_RKE2_TYPE=server sh /tmp/rke2-install.sh
      args:
        creates: "{{ commands.rke2 }}"
        executable: /bin/bash
      environment:
        INSTALL_RKE2_METHOD: tar

- name: Manage RKE2 server service
  block:
    - name: Include monitoring tasks
      ansible.builtin.include_tasks: monitor_rke2.yml

    - name: Start RKE2 server service if not running
      systemd:
        name: rke2-server
        state: started
        enabled: yes
      when: not rke2_fully_running
      register: rke2_service_result

    - name: Verify service status
      ansible.builtin.systemd:
        name: rke2-server
      register: service_status

    - name: Display service status
      ansible.builtin.debug:
        msg: 
          - "Service Status: {{ service_status.status.SubState }}"
          - "Active Since: {{ service_status.status.ActiveEnterTimestamp }}"
  rescue:
    - name: Collect failure information
      shell: |
        echo "=== Service Status ===" > /tmp/rke2-failure.log
        systemctl status rke2-server >> /tmp/rke2-failure.log
        echo -e "\n=== Recent Logs ===" >> /tmp/rke2-failure.log
        journalctl -u rke2-server -n 50 >> /tmp/rke2-failure.log
      when: rke2_init_failed | default(false)
      ignore_errors: true

    - name: Display failure information
      ansible.builtin.debug:
        msg: "{{ lookup('file', '/tmp/rke2-failure.log').split('\n') }}"

    - name: Fail with error
      ansible.builtin.fail:
        msg: "RKE2 server failed to start properly. Check the logs for details."

- name: Wait for RKE2 binaries to be installed
  wait_for:
    path: "/var/lib/rancher/rke2/bin/kubectl"
    timeout: 300
  register: kubectl_binary

- name: Debug kubectl binary status
  debug:
    msg: 
      - "Kubectl binary exists: {{ kubectl_binary.stat.exists | default(false) }}"
      - "Wait time: {{ kubectl_binary.elapsed }}"
      - "Path: /var/lib/rancher/rke2/bin/kubectl"

- name: Create kubectl symlink
  ansible.builtin.file:
    src: "/var/lib/rancher/rke2/bin/kubectl"
    dest: "/usr/local/bin/kubectl"
    state: link
    force: true
  when: kubectl_binary.stat.exists | default(false)

- name: Create .kube directory
  ansible.builtin.file:
    path: "{{ paths.user.kube_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: "{{ paths.rke2.kubeconfig }}"
    dest: "{{ paths.user.kubeconfig }}"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Debug token generation process
  block:
    - name: Show existing configuration status
      ansible.builtin.debug:
        msg: 
          - "RKE2 config exists: {{ rke2_config.stat.exists }}"
          - "Inventory hostname: {{ inventory_hostname }}"
          - "First control plane node: {{ groups['control_plane_nodes'][0] }}"

    - name: Verbose token generation
      ansible.builtin.debug:
        msg: "Generating or retrieving token for {{ inventory_hostname }}"

# Add firewall rules if needed
- name: Configure required ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 6443  # Kubernetes API
    - 2379  # etcd client
    - 2380  # etcd peer

- name: Wait for token to be available
  ansible.builtin.wait_for:
    timeout: 30
  when: rke2_token is defined

- name: Verify token sharing
  ansible.builtin.debug:
    msg: "Token status for {{ item }}: {{ hostvars[item].rke2_token is defined }}"
  with_items: "{{ groups['all'] }}"
  run_once: true
