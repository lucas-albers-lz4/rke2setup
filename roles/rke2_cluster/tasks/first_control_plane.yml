---
# First check if RKE2 is already installed and configured
- name: Check if RKE2 is already configured
  ansible.builtin.stat:
    path: "{{ paths.rke2.config }}/config.yaml"
  register: rke2_config

# Attempt to read existing token if configuration exists
- name: Read existing token
  block:
    - name: Slurp existing config
      ansible.builtin.slurp:
        src: "{{ paths.rke2.config }}/config.yaml"
      register: existing_config
      when: rke2_config.stat.exists

    - name: Parse existing token
      ansible.builtin.set_fact:
        rke2_token: "{{ (existing_config.content | b64decode | from_yaml).token | default(lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=48')) }}"
      when: existing_config is defined and existing_config.content is defined
  rescue:
    - name: Generate new token if parsing fails
      ansible.builtin.set_fact:
        rke2_token: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=48') }}"

# Fallback to generating a new token if no existing configuration
- name: Generate cluster token
  ansible.builtin.set_fact:
    rke2_token: "{{ lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=48') }}"
  when: rke2_token is not defined

# Share token with other hosts
- name: Share token with other hosts
  set_fact:
    rke2_token: "{{ hostvars[groups['three_node_control_plane'][0]].rke2_token }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['three_node_control_plane'][1:] }}"
  when: inventory_hostname == groups['three_node_control_plane'][0]

- name: Create RKE2 config directory
  ansible.builtin.file:
    path: "{{ paths.rke2.config }}"
    state: directory
    mode: '0755'

- name: Configure first control plane node
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ paths.rke2.config }}/config.yaml"
    mode: '0644'
  vars:
    node_type: "{{ install_types.server }}"
    is_first_server: true

- name: Download RKE2 installation script
  ansible.builtin.get_url:
    url: https://get.rke2.io
    dest: /tmp/rke2-install.sh
    mode: '0755'
  register: rke2_installer

- name: Install RKE2 server
  block:
    - name: Execute RKE2 server installation
      ansible.builtin.shell: |
        set -o pipefail
        INSTALL_RKE2_TYPE=server sh /tmp/rke2-install.sh
      args:
        creates: "{{ commands.rke2 }}"
        executable: /bin/bash
      environment:
        INSTALL_RKE2_METHOD: tar

- name: Enable and start RKE2 server
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: started
    daemon_reload: true

- name: Create kubectl symlink
  ansible.builtin.file:
    src: "{{ paths.rke2.data }}/bin/kubectl"
    dest: "/usr/local/bin/kubectl"
    state: link
    force: true

- name: Create .kube directory
  ansible.builtin.file:
    path: "{{ paths.user.kube_dir }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: "{{ paths.rke2.kubeconfig }}"
    dest: "{{ paths.user.kubeconfig }}"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'

- name: Debug token generation process
  block:
    - name: Show existing configuration status
      ansible.builtin.debug:
        msg: 
          - "RKE2 config exists: {{ rke2_config.stat.exists }}"
          - "Inventory hostname: {{ inventory_hostname }}"
          - "First control plane node: {{ groups['three_node_control_plane'][0] }}"

    - name: Verbose token generation
      ansible.builtin.debug:
        msg: "Generating or retrieving token for {{ inventory_hostname }}"

# Add firewall rules if needed
- name: Configure required ports
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  with_items:
    - 6443  # Kubernetes API
    - 2379  # etcd client
    - 2380  # etcd peer
