---
# First check if RKE2 is already installed and configured
- name: Check if RKE2 is already configured
  ansible.builtin.stat:
    path: "{{ paths.rke2.config }}/config.yaml"
  register: rke2_config

- name: Slurp existing config
  ansible.builtin.slurp:
    src: /etc/rancher/rke2/config.yaml
  register: rke2_config_content
  when: rke2_config.stat.exists

- name: Parse existing token
  ansible.builtin.set_fact:
    rke2_token: "{{ (rke2_config_content.content | b64decode | from_yaml).token }}"
  when: rke2_config.stat.exists and rke2_config_content is defined

- name: Generate new token if none exists
  when: not rke2_config.stat.exists

  block:
    - name: Generate cluster token
      ansible.builtin.shell: tr -dc A-Za-z0-9 </dev/urandom | head -c 64
      register: token_result
      when: not rke2_config.stat.exists

    - name: Set RKE2 token from generation
      ansible.builtin.set_fact:
        rke2_token: "{{ token_result.stdout }}"
      when: token_result is defined and token_result.stdout is defined
- name: Verify token is set
  ansible.builtin.assert:
    that:
      - rke2_token is defined
      - rke2_token | string | length > 0
    fail_msg: "Failed to set RKE2 token - neither existing token found nor new token generated"

- name: Share token with other hosts
  ansible.builtin.set_fact:
    rke2_token: "{{ hostvars[groups['control_plane_nodes'][0]].rke2_token }}"
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"
  when: rke2_token is defined

- name: Create RKE2 config directory
  ansible.builtin.file:
    path: "{{ paths.rke2.config }}"
    state: directory
    mode: "0755"
  become: true

- name: Configure first control plane node
  ansible.builtin.template:
    src: config.yaml.j2
    dest: "{{ paths.rke2.config }}/config.yaml"
    mode: "0644"
  vars:
    tls_san: "{{ rke2_config['tls-san'] }}"
    token: "{{ rke2_config.token }}"
  become: true

- name: Download RKE2 installation script
  ansible.builtin.get_url:
    url: https://get.rke2.io
    dest: /tmp/rke2-install.sh
    mode: "0700"
  become: true

- name: Execute RKE2 server installation
  ansible.builtin.shell: |
    INSTALL_RKE2_TYPE=server bash /tmp/rke2-install.sh
  args:
    creates: /usr/local/bin/rke2
  become: true

- name: Enable rke2-server
  ansible.builtin.command: systemctl enable rke2-server
  ignore_errors : true
  become: true
- name: Enable rke2-server
  ansible.builtin.command: systemctl enable rke2-server
  become: true

- name: Include image management tasks
  ansible.builtin.include_tasks: manage_images.yml
  when: airgap_install

- name: Start RKE2 service
  ansible.builtin.systemd:
    name: "rke2-{{ 'server' if inventory_hostname in groups['control_plane_nodes'] else 'agent' }}"
    state: started
    daemon_reload: true
  become: true

- name: Wait for RKE2 service to be fully started
  ansible.builtin.wait_for:
    timeout: 181
  register: wait_result
  retries: 12 
  delay: 15
  until: wait_result is success

- name: Wait for RKE2 binaries to be installed
  ansible.builtin.wait_for:
    path: "{{ kubectl.binary.source }}"
    timeout: 300
  register: kubectl_binary

- name: Debug kubectl binary status
  ansible.builtin.debug:
    msg:
      - "Kubectl binary exists: {{ kubectl_binary.stat.exists | default(false) }}"
      - "Wait time: {{ kubectl_binary.elapsed }}"
      - "Path: {{ kubectl.binary.source }}"

- name: Create kubectl symlink
  ansible.builtin.file:
    src: "{{ kubectl.binary.source }}"
    dest: "{{ kubectl.binary.symlink }}"
    state: link
    force: true
  when: kubectl_binary.stat.exists | default(false)

- name: Create .kube directory
  ansible.builtin.file:
    path: "{{ kubectl.config.user | dirname }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0755"

- name: Copy kubeconfig
  ansible.builtin.copy:
    src: "{{ kubectl.config.source }}"
    dest: "{{ kubectl.config.user }}"
    remote_src: true
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: "0600"
  when: kubectl_binary.stat is defined

- name: Debug token generation process
  block:
    - name: Show existing configuration status
      ansible.builtin.debug:
        msg:
          - "RKE2 config exists: {{ rke2_config.stat.exists }}"
          - "Inventory hostname: {{ inventory_hostname }}"
          - "First control plane node: {{ groups['control_plane_nodes'][0] }}"

    - name: Verbose token generation
      ansible.builtin.debug:
        msg: "Generating or retrieving token for {{ inventory_hostname }}"

- name: Wait for token to be available
  ansible.builtin.wait_for:
    timeout: 30
  when: rke2_token is defined

- name: Verify token sharing
  ansible.builtin.debug:
    msg: "Token status for {{ item }}: {{ hostvars[item].rke2_token is defined }}"
  with_items: "{{ groups['all'] }}"
  run_once: true

- name: Wait for first control plane to be ready
  ansible.builtin.wait_for:
    path: "{{ kubectl.config.source }}"
    state: present
    timeout: "{{ timeout_startup }}"
  register: kubeconfig_file

- name: Wait for RKE2 to be ready on first control plane
  when: inventory_hostname == groups['control_plane_nodes'][0]
  block:
    - name: Include comprehensive server checks
      ansible.builtin.include_tasks: wait_for_server.yml
    - name: Set fact for control plane readiness
      ansible.builtin.set_fact:
        control_plane_ready: true
        rke2_ready:
          service: "{{ rke2_service }}"
          ports: "{{ port_check }}"
          api: "{{ healthz_check }}"
        cacheable: true

  rescue:
    - name: Collect service logs safely
      ansible.builtin.shell: |
        logfile=$(mktemp)
        journalctl -u rke2-server --no-pager -n 50 > "$logfile"
        cat "$logfile"
        rm -f "$logfile"
      register: service_logs
      changed_when: false

    - name: First control plane verification failed
      ansible.builtin.fail:
        msg: |
          First control plane node failed verification:
          Service Status: {{ rke2_status.stdout | default('Unknown') }}
          Node Status: {{ node_status.stdout | default('Unknown') }}
          API Status: {{ api_check.status | default('Unknown') }}

          Recent Logs:
          {{ service_logs.stdout_lines | default([]) | join('\n') }}

- name: Debug RKE2 status
  ansible.builtin.debug:
    msg: |
      Service Status: {{ rke2_ready.service.status.ActiveState }}
      API Status: {{ rke2_ready.api.stdout }}
      Ports Status: {{ rke2_ready.ports.msg }}
  when: inventory_hostname == groups['control_plane_nodes'][0] and rke2_ready is defined

- name: Verify first control plane is ready
  ansible.builtin.include_tasks: verify_first_control_plane.yml
  when: control_plane_ready | bool
