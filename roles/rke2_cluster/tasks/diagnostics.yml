---
- name: Collect diagnostic information
  block:
    - name: Get RKE2 service status
      ansible.builtin.command: systemctl status rke2-server
      register: rke2_status
      ignore_errors: true

    - name: Get containerd status
      ansible.builtin.command: systemctl status containerd
      register: containerd_status
      ignore_errors: true

    - name: Check for common issues
      ansible.builtin.copy:
        dest: /tmp/rke2_diagnostics.sh
        mode: '0755'
        content: |
          #!/bin/bash
          declare -a ISSUES=()

          # Check if containerd is running
          if ! systemctl is-active containerd >/dev/null 2>&1; then
            ISSUES+=("containerd service is not running")
          fi

          # Check RKE2 config file
          if [ ! -f /etc/rancher/rke2/config.yaml ]; then
            ISSUES+=("RKE2 config file missing")
          fi

          # Check required directories
          for dir in /etc/rancher/rke2 /var/lib/rancher/rke2; do
            if [ ! -d "$dir" ]; then
              ISSUES+=("Required directory $dir is missing")
            fi
          done

          # Check disk space
          if [[ $(df /var/lib/rancher --output=pcent | tail -1 | tr -d ' %') -gt 90 ]]; then
            ISSUES+=("Low disk space on /var/lib/rancher")
          fi

          # Check memory
          if [[ $(free | awk '/Mem:/ {print int($4/$2 * 100)}') -lt 20 ]]; then
            ISSUES+=("Low available memory (less than 20%)")
          fi

          # Check required ports
          for port in 6443 9345; do
            if ! ss -tulpn | grep -q ":$port"; then
              ISSUES+=("Port $port is not listening")
            fi
          done

          # Output results
          ISSUE_COUNT=$(echo "${ISSUES[@]}" | wc -w)
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "No common issues detected"
          else
            printf '%s\n' "${ISSUES[@]}"
          fi

    - name: Run diagnostics script
      ansible.builtin.command: /tmp/rke2_diagnostics.sh
      register: system_checks
      changed_when: false

    - name: Remove temporary script
      ansible.builtin.file:
        path: /tmp/rke2_diagnostics.sh
        state: absent

    - name: Display diagnostic information
      ansible.builtin.debug:
        msg: |
          === RKE2 Diagnostics ===
          Service Status:
          {{ rke2_status.stdout_lines | default(['Not available']) | join('\n') }}
          
          Containerd Status:
          {{ containerd_status.stdout_lines | default(['Not available']) | join('\n') }}
          
          System Checks:
          {{ system_checks.stdout_lines | default(['No results']) | join('\n') }}

  become: true
