---
- name: Check if node is already ready
  ansible.builtin.command:
    cmd: "{{ paths.rke2.bin }}/kubectl get nodes {{ inventory_hostname | lower }} -o jsonpath='{.status.conditions[?(@.type==\"Ready\")].status}'"
  register: node_status
  changed_when: false
  failed_when: false
  environment:
    KUBECONFIG: "{{ paths.rke2.kubeconfig }}"

- name: Wait for node to be ready
  block:
    - name: Attempt to verify node readiness
      ansible.builtin.shell: |
        set -o pipefail
        {{ paths.rke2.bin }}/kubectl get nodes {{ inventory_hostname | lower }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}'
      args:
        executable: /bin/bash
      register: node_readiness
      until: node_readiness.stdout == 'True'
      retries: "{{ wait_config.retries }}"
      delay: "{{ wait_config.delay }}"
      changed_when: false
      environment:
        KUBECONFIG: "{{ paths.rke2.kubeconfig }}"

- name: Debug node readiness status
  ansible.builtin.debug:
    msg:
      - "Node: {{ inventory_hostname }}"
      - "Readiness Status: {{ node_readiness.stdout | default('Unknown') }}"

- name: Comprehensive control plane readiness check
  block:
    - name: Wait for RKE2 server service
      ansible.builtin.systemd:
        name: rke2-server
        state: started
      register: rke2_service
      until: rke2_service.status.ActiveState == "active"
      retries: 30
      delay: 10

    - name: Wait for supervisor and API ports
      ansible.builtin.wait_for:
        host: "{{ item.host }}"
        port: "{{ item.port }}"
        timeout: 300
        state: started
      loop:
        - { host: "{{ groups['control_plane_nodes'][0] }}", port: 9345 }
        - { host: "{{ groups['control_plane_nodes'][0] }}", port: 6443 }
      register: port_check

    - name: Verify API health
      ansible.builtin.uri:
        url: "https://{{ groups['control_plane_nodes'][0] }}:6443/healthz"
        validate_certs: false
        return_content: true
      register: healthz_check
      until: healthz_check.content == "ok"
      retries: 30
      delay: 10
  rescue:
    - name: Run diagnostics on failure
      include_tasks: diagnostics.yml

    - name: Fail with detailed error
      fail:
        msg: >-
          RKE2 cluster failed to become ready. 
          Service status: {{ rke2_service.status | default('Unknown') }}
          Port check: {{ port_check | default('Not completed') }}
          API health: {{ healthz_check | default('Not completed') }}

- name: Wait for RKE2 binaries to be installed
  wait_for:
    path: /var/lib/rancher/rke2/bin/kubectl
    timeout: 300
  register: kubectl_binary
