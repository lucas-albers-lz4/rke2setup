---
- name: Initialize RKE2 state tracking
  ansible.builtin.set_fact:
    rke2_states:
      INIT: 
        pattern: "Starting rke2"
        completed: false
        timestamp: null
      ETCD: 
        pattern: "etcd data store connection OK"
        completed: false
        timestamp: null
      API_SERVER:
        pattern: "Kube API server is now running"
        completed: false
        timestamp: null
      CONTROLLERS:
        pattern: "Starting managed etcd node metadata controller"
        completed: false
        timestamp: null
      RUNNING:
        pattern: "rke2 is up and running"
        completed: false
        timestamp: null
    rke2_errors: []

- name: Check existing journal for completed states
  shell: |
    #!/bin/bash
    journalctl -u rke2-server --no-pager -n 1000 | while read -r line; do
      timestamp=$(echo "$line" | awk '{print $1" "$2" "$3}')
      {% for state, info in rke2_states.items() %}
      if [[ $line =~ "{{ info.pattern }}" ]]; then
        echo "{{ state }}|$timestamp"
      fi
      # Check for errors that might invalidate previous success
      if [[ $line =~ "level=fatal" ]] || [[ $line =~ "Failed to start" ]]; then
        echo "ERROR|$timestamp|$line"
      fi
      {% endfor %}
    done
  args:
    executable: /bin/bash
  register: existing_states
  changed_when: false

- name: Process existing state information
  ansible.builtin.set_fact:
    rke2_states: >-
      {{ rke2_states | combine({
        item.split('|')[0]: {
          'pattern': rke2_states[item.split('|')[0]].pattern,
          'completed': true,
          'timestamp': item.split('|')[1:]|join('|')
        }
      }) }}
  loop: "{{ existing_states.stdout_lines }}"
  when: "item.split('|')[0] != 'ERROR'"

- name: Check if service is already running successfully
  ansible.builtin.set_fact:
    rke2_fully_running: "{{ 
      rke2_states.RUNNING.completed and 
      not (existing_states.stdout_lines | select('match', '^ERROR.*') | list)
    }}"

- name: Display current RKE2 state
  debug:
    msg: |
      Current RKE2 States:
      {% for state, info in rke2_states.items() %}
      {{ state }}: {{ info }}
      {% endfor %}

