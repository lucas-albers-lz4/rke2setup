---
- name: Check system status before reboot
  block:
    - name: Check for pending package updates
      ansible.builtin.shell: |
        if command -v apt-get >/dev/null 2>&1; then
          apt-get -s upgrade | grep -q '^Inst'
        elif command -v yum >/dev/null 2>&1; then
          yum check-update --quiet
        fi
      register: updates_pending
      changed_when: false
      failed_when: false

    - name: Record uptime before reboot
      ansible.builtin.shell: cat /proc/uptime | awk '{print $1}'
      register: uptime_before
      changed_when: false

- name: Sync filesystems before reboot
  ansible.builtin.command: sync
  changed_when: false

- name: Schedule reboot with warning
  ansible.builtin.shell: |
    wall "System reboot scheduled in 2 seconds by Ansible"
    sleep 2 && systemctl reboot
  async: 1
  poll: 0
  ignore_errors: true

- name: Wait for shutdown
  ansible.builtin.wait_for_connection:
    timeout: 60
    connect_timeout: 2
    delay: 5
    sleep: 2
  register: wait_down
  failed_when: wait_down is success
  ignore_errors: true

- name: Wait for port 22 to be available
  ansible.builtin.wait_for:
    host: "{{ ansible_host }}"
    port: 22
    state: started
    delay: 10
    timeout: 300
    connect_timeout: 30
  delegate_to: localhost
  become: false

- name: Wait for system to settle
  ansible.builtin.wait_for:
    timeout: 30
  delegate_to: localhost
  become: false

- name: Wait for system to come back
  ansible.builtin.wait_for_connection:
    delay: 10
    sleep: 5
    timeout: 600
    connect_timeout: 30
  register: wait_up
  retries: 30
  delay: 10
  until: wait_up is success

- name: Post-reboot verification
  block:
    - name: Get uptime after reboot
      ansible.builtin.shell: cat /proc/uptime | awk '{print $1}'
      register: uptime_after
      changed_when: false

    - name: Verify system services are running
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
      loop:
        - systemd-journald
        - ssh
      register: service_status
      retries: "{{ retry_standard }}"
      delay: "{{ retry_delay }}"
      until: service_status is success

    - name: Check system status
      ansible.builtin.command: systemctl is-system-running
      register: system_status
      changed_when: false
      failed_when: false

    - name: Verify network connectivity
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 22
        timeout: "{{ timeout_standard }}"
      delegate_to: localhost
      become: false

    - name: Debug reboot status
      ansible.builtin.debug:
        msg: |
          Host: {{ inventory_hostname }}
          Uptime before: {{ uptime_before.stdout }}
          Uptime after: {{ uptime_after.stdout }}
          Reboot verified: {{ uptime_after.stdout | float < uptime_before.stdout | float }}
          System status: {{ system_status.stdout }}
          Updates pending: {{ updates_pending.rc == 100 }}
          Services status: {{ service_status }}

  rescue:
    - name: Report failed post-reboot checks
      ansible.builtin.debug:
        msg: "Post-reboot verification failed for {{ inventory_hostname }}"
      failed_when: true

- name: Verify successful reboot
  ansible.builtin.assert:
    that:
      - uptime_after.stdout | float < uptime_before.stdout | float
      - system_status.stdout in ['running', 'degraded']
      - wait_up is success
    msg: "Reboot verification failed for {{ inventory_hostname }}"
